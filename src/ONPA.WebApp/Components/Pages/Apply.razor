@page "/Apply"
@layout SlimLayout
@using ONPA.WebApp.Services
@using ONPA.WebApp.Services.Abstractions
@using ONPA.WebApp.Components.Layout
@inject IOrganizationService OrganizationService
@inject IApplyService ApplyService
<h3>Wniosek Członkowski</h3>
@if (ApplicationForm is null)
{
    <FluentProgress IsIndeterminate="true" Stroke="ProgressStroke.Large"/>
}
else
{
    if (!saved)
    {
        if (saving)
        {
            <FluentProgress IsIndeterminate="true" Stroke="ProgressStroke.Large"/>
        }
        else
        {
            <FluentTextField @bind-Value=ApplicationForm.FirstName Label="Imię"></FluentTextField>
            @ApplicationForm.FirstName
            <FluentTextField @bind-Value=ApplicationForm.LastName Label="Nazwisko"></FluentTextField>
            <FluentTextField @bind-Value=ApplicationForm.Email Label="Email"></FluentTextField>
            <FluentTextField @bind-Value=ApplicationForm.Phone Label="Telefon"></FluentTextField>
            <FluentTextArea @bind-Value="ApplicationForm.Address" Label="Adres" Cols="100"></FluentTextArea>
            @for (var i = 0; i < ApplicationForm.Recommendations.Length; i++)
            {
                string recommendation = ApplicationForm.Recommendations[i];
                var label = $"Rekomendacja {i + 1}";
                <FluentTextField @bind-Value=recommendation Label=@label></FluentTextField>
                ApplicationForm.Recommendations[i] = recommendation;
                @ApplicationForm.Recommendations[i]
            }

            <FluentButton @onclick="Save" Appearance="Appearance.Accent">Zapisz</FluentButton>
        }
    }
    else
    {
        <p>Twój wniosek członkowski został przesłany!</p>
    }
}

@code {
    public ApplyForm? ApplicationForm { get; set; } = default!;
    public Guid? OrganizationId { get; set; }
    bool saved =false;
    bool saving = false;
    protected override async Task OnInitializedAsync()
    {
        var orgs = await OrganizationService.GetOrganizations();
        var OrganizationId = orgs.FirstOrDefault()?.Id ?? Guid.Empty;
        var settings = await OrganizationService.GetOrganizationSettings(OrganizationId);
        ApplicationForm = new ApplyForm(settings.RequiredRecomendation, OrganizationId);
    }

    private async Task Save()
    {
        saving = true;
        if (ApplicationForm is null)
        {
            return;
        }

        saved = await ApplyService.SaveApplication(ApplicationForm);
    }
}