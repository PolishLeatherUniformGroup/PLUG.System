@page "/applications"
@using ONPA.WebApp.Components.Shared
@using ONPA.WebApp.Services.Abstractions

@inject IApplyService ApplyService
@inject NavigationManager NavManager

<h2>Wnioski Członkowskie</h2>
<div class="content">
    <FluentToolbar Class="section-toolbar">
        <FluentLabel Typo="Typography.Subject">Status</FluentLabel>
        <FluentCombobox Items=@statusOptions Height="200px" Autocomplete="ComboboxAutocomplete.List"
                        OptionText="@(i => i.Text)"
                        OptionValue="@(i => i.Value)"
                        OptionSelected="@(i => i.Selected)"
                        bind-Value="@statusFilterValue"
                        Appearance="Appearance.Filled"/>
        <FluentButton IconStart="@(new Icons.Regular.Size20.Filter())" slot="end" @onclick="async() =>{ 
            var status = int.Parse(statusFilterValue);
            FilterByStatus(status, 0, Pagination.ItemsPerPage);
        }">Filtruj</FluentButton>
    </FluentToolbar>

    <FluentDataGrid ItemsProvider="@applicationsProvider" TGridItem="ApplicationItem"
                    GridTemplateColumns="0.4fr 0.6fr 0.6fr 0.6fr 0.2fr 0.4fr"
                    Pagination="@Pagination">
        <TemplateColumn Title="Status">
            <FluentBadge Fill="somevalue" Appearance="Appearance.Neutral" BackgroundColor="@context.Status.ToBackgroundColor()" Color="#ffffff">@context.Status.ToDisplayString()</FluentBadge>
        </TemplateColumn>
        <PropertyColumn Title="Imię" Property="@(c => c.FirstName)"/>
        <PropertyColumn Title="Nazwisko" Property="@(c => c.LastName)"/>
        <PropertyColumn Title="Email" Property="@(c => c.Email)"/>
        <PropertyColumn Title="Data wniosku" Property="@(c => c.ApplicationDate.ToShortDateString())"/>
        <TemplateColumn Title="Akcje">
            <ApplicationActions TItem="ApplicationItem" Item="context" />
        </TemplateColumn>
    </FluentDataGrid>
</div>

@code {
    
    GridItemsProvider<ApplicationItem> applicationsProvider = default!;
    PaginationState Pagination { get; set; }= new() { ItemsPerPage = 10 };
    string statusFilterValue = "-1";

    const int ToastTimeout = 15 * 1000;


    List<Option<string>> statusOptions = new()
    {
        { new Option<string> { Value = "-1", Text = "Wszystkie", Selected = true } },
        { new Option<string> { Value = "0", Text = "Wpłynął", } },
        { new Option<string> { Value = "1", Text = "Zweryfikowany" } },
        { new Option<string> { Value = "2", Text = "Niepoprawny" } },
        { new Option<string> { Value = "3", Text = "Nie rekomendowany" } },
        { new Option<string> { Value = "4", Text = "Oczekuje decyzji" } },
        { new Option<string> { Value = "5", Text = "Zaakceptowany" } },
        { new Option<string> { Value = "6", Text = "Odrzucony" } },
        { new Option<string> { Value = "7", Text = "W odwołaniu" } },
        { new Option<string> { Value = "8", Text = "Zaakceptowany po odwołaniu" } },
        { new Option<string> { Value = "9", Text = "Odrzucony po odwołaniu" } },
    };

    protected override Task OnInitializedAsync()
    {
        applicationsProvider = async req =>
        {
            var response = await ReadApplications();
            return response;};
        return Task.CompletedTask;
    }

    public Task FilterByStatus(int status, int page, int limit)
    {
        applicationsProvider = async req =>
        {
            var result = await ReadApplications(status, page, limit);
            return result;
        };
        return Task.CompletedTask;
    }

    private async Task<GridItemsProviderResult<ApplicationItem>> ReadApplications(int status=-1, int page=0, int limit=10)
    {
        return await ApplyService.GetApplications(status, page, limit);
    }

}