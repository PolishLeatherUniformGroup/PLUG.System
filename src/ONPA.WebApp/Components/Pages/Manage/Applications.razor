@page "/applications"
@using ONPA.WebApp.Components.Shared.Dialogs
@using ONPA.WebApp.Data
@using ONPA.WebApp.Components.Shared

@*@inject HttpClient Http*@
@inject NavigationManager NavManager

<h2>Wnioski Członkowskie</h2>
<div class="content">
    <FluentToolbar Class="section-toolbar">
        <FluentLabel Typo="Typography.Subject">Status</FluentLabel>
        <FluentCombobox Items=@statusOptions Height="200px" Autocomplete="ComboboxAutocomplete.List"
                        OptionText="@(i => i.Text)"
                        OptionValue="@(i => i.Value)"
                        OptionSelected="@(i => i.Selected)"
                        Appearance="Appearance.Filled"/>
        <FluentButton IconStart="@(new Icons.Regular.Size20.Filter())" slot="end">Filtruj</FluentButton>
    </FluentToolbar>

    <FluentDataGrid ItemsProvider="@applicationsProvider" TGridItem="ApplicationItem"
                    GridTemplateColumns="0.4fr 0.6fr 0.6fr 0.6fr 0.2fr 0.4fr"
                    Pagination="@pagination">
        <TemplateColumn Title="Status">
            <FluentBadge Fill="somevalue" Appearance="Appearance.Neutral" BackgroundColor="@context.Status.ToBackgroundColor()" Color="#ffffff">@context.Status.ToDisplayString()</FluentBadge>
        </TemplateColumn>
        <PropertyColumn Title="Imię" Property="@(c => c.FirstName)"/>
        <PropertyColumn Title="Nazwisko" Property="@(c => c.LastName)"/>
        <PropertyColumn Title="Email" Property="@(c => c.Email)"/>
        <PropertyColumn Title="Data wniosku" Property="@(c => c.ApplicationDate.ToShortDateString())"/>
        <TemplateColumn Title="Akcje">
            <ApplicationActions TItem="ApplicationItem" Item="context" />
        </TemplateColumn>
    </FluentDataGrid>
</div>

@code {
    GridItemsProvider<ApplicationItem> applicationsProvider = default!;
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    const int ToastTimeout = 15 * 1000;


    List<Option<string>> statusOptions = new()
    {
        { new Option<string> { Value = "-1", Text = "Wszystkie", Selected = true } },
        { new Option<string> { Value = "0", Text = "Wpłynął", } },
        { new Option<string> { Value = "1", Text = "Zweryfikowany" } },
        { new Option<string> { Value = "2", Text = "Niepoprawny" } },
        { new Option<string> { Value = "3", Text = "Nie rekomendowany" } },
        { new Option<string> { Value = "4", Text = "Oczekuje decyzji" } },
        { new Option<string> { Value = "5", Text = "Zaakceptowany" } },
        { new Option<string> { Value = "6", Text = "Odrzucony" } },
        { new Option<string> { Value = "7", Text = "W odwołaniu" } },
        { new Option<string> { Value = "8", Text = "Zaakceptowany po odwołaniu" } },
        { new Option<string> { Value = "9", Text = "Odrzucony po odwołaniu" } },
    };

    protected override async Task OnInitializedAsync()
    {
        applicationsProvider = async req =>
        {
            /* var url = NavManager.GetUriWithQueryParameters("https://api.fda.gov/food/enforcement.json", new Dictionary<string, object?>
                     {
                     { "page", req.StartIndex },
                     { "limit", pagination.ItemsPerPage },
             });


             var response = await Http.GetFromJsonAsync<FoodRecallQueryResult>(url, req.CancellationToken);*/
            var r = new Random();
            var testData = new List<ApplicationItem>
            {
                new ApplicationItem
                {
                    FirstName = "Jan",
                    LastName = "Kowalski",
                    Email = "jan.kowalski@email.com",
                    ApplicationDate = DateTime.Now.Date,
                    Status = ApplicationStatus.AwaitDecision
                },
                new ApplicationItem
                {
                    FirstName = "Marian",
                    LastName = "Nowak",
                    Email = "marian.nowak@email.com",
                    ApplicationDate = DateTime.Now.Date,
                    Status = ApplicationStatus.Received
                },
                new ApplicationItem
                {
                    FirstName = "Bogumił",
                    LastName = "Nowacki",
                    Email = "bogumil.nowacki@email.com",
                    ApplicationDate = DateTime.Now.Date,
                    Status = ApplicationStatus.RejectionAppealed
                }
            };
            return GridItemsProviderResult.From<ApplicationItem>(items: testData, totalItemCount: 1);
        };
    }


}